import os
comp = ARGUMENTS.get('comp','')
prec = ARGUMENTS.get('prec','')
mpi = ARGUMENTS.get('mpi','')
openmp = ARGUMENTS.get('openmp','')

if str(comp)=='sun':
  env = Environment(tools=['link','sunf90','sunf95','suncc','sunc++'])
elif str(comp)=='intel':
  env = Environment(tools=['default','ifort','intelc'])
else:
  env = Environment()

def from_env(s):
  try:
    env.Append(ENV = {s : os.environ[s]})
  except:
    pass

from_env('PATH')
from_env('LIBRARY_PATH')
from_env('LD_LIBRARY_PATH')
from_env('C_INCLUDE_PATH')
from_env('CPATH')
from_env('CPLUS_INCLUDE_PATH')
from_env('INTEL_LICENSE_FILE')

#HACK for some computers setting only LD_LIBRARY_PATH
try:
  env.Append(ENV = {'LIBRARY_PATH' : os.environ['LD_LIBRARY_PATH']})
except:
  pass

try:
  fc = os.environ['FC']
  if len(fc)>0:
    env.Replace(F90 = fc)
except:
  pass

if str(mpi)=='yes':
  env.Replace(LINK = 'mpif90')
  env.Append(F90FLAGS=' -DMPI')
  env.Append(CFLAGS=' -DMPI')
else:
  pass

if str(mpi)=='yes':
  openmp = 'no'

if str(comp)=='sun':
  #env = Environment(tools=['link','sunf90','sunf95','suncc','sunc++'])
  if str(openmp)=='no':
    omp_flag = ''
  else:
    omp_flag = ' -openmp'
  env.Append(F90FLAGS='-fpp -xpp=cpp -g -fast -fPIC -DNO_CONTIGUOUS')
  env.Replace(SHF90FLAGS=['$F90FLAGS','-fPIC'])
  env.Replace(SHLINKFLAGS=['$LINKFLAGS', '-G'])
  comp_dir='sun'

  env.Append(F90PATH = ['${TARGET.dir}'])
  env.Append(FORTRANMODDIRPREFIX = '-moddir=')
  env.Append(INCPREFIX = '-M')
  
  fortran_libs = []
 
elif str(comp)=='intel':
  #env = Environment(tools=['default','ifort','intelc'])
  if str(openmp)=='no':
    omp_flag = ''
  else:
    omp_flag = ' -openmp'
  env.Append(F90FLAGS='-cpp -g -O3')
  comp_dir='intel'
  
  env.Append(F90PATH = ['${TARGET.dir}'])
  
  fortran_libs = ['ifcore','ifcoremt']
  
else:
  env.Append(F90FLAGS='-cpp -g -Wall -Wextra -Wsurprising -Wno-unused-dummy-argument -Ofast -fbacktrace -fcheck=bounds,pointer -ffpe-trap=zero,overflow,invalid')
  if str(openmp)=='no':
    omp_flag = ''
  else:
    omp_flag = ' -fopenmp'
  comp_dir='gcc'
  
  env.Append(F90PATH = ['${TARGET.dir}','/usr/local/include/','/usr/local/lib64'])
  env.Append(FORTRANMODDIRPREFIX = '-J')
  
  fortran_libs = ['gfortran']


env.Append(F90FLAGS=omp_flag)
  
if str(prec)=='dp':
  prec_dir = 'dp'  
  env.Append(F90FLAGS=' -DDPREC')
else:
  prec_dir = 'sp'


env.Append(FORTRANMODDIR = '${TARGET.dir}')

objs = env.SharedObject(target='../bin/'+comp_dir+'/precisions', source='precisions.f90')
objs += env.SharedObject(target='../bin/'+comp_dir+'/parameters', source='parameters.f90')
objs += env.SharedObject(target='../bin/'+comp_dir+'/customfftw3', source='customfftw3.f90')
objs += env.SharedObject(target='../bin/'+comp_dir+'/missing_pfft', source='missing_pfft.c')
objs += env.SharedObject(target='../bin/'+comp_dir+'/custompfft', source='custompfft.f90')
objs += env.SharedObject(target='../bin/'+comp_dir+'/fft', source='fft.f90')
Depends(objs[-1], 'fft-inc.f90')
Depends(objs[-1], 'plan_new-inc.f90')
Depends(objs[-1], 'allocate_fftw-inc.f90')
Depends(objs[-1], 'plan_new_many-inc.f90')
Depends(objs[-1], 'allocate_fftw_many-inc.f90')
Depends(objs[-1], objs[3])
objs += env.SharedObject(target='../bin/'+comp_dir+'/poisfft', source='poisfft.f90')
Depends(objs[-1], 'poisfft-inc.f90')
Depends(objs[-1], 'loop_nest_3d.f90')
objs += env.SharedObject(target='../bin/'+comp_dir+'/main', source='main.f90')
objs += env.SharedObject(target='../bin/'+comp_dir+'/c_binding', source='c_binding.f90')
Depends(objs[-1], 'c_new-inc.f90')
Depends(objs[-1], 'c_execute-inc.f90')
objs += env.SharedObject(target='../bin/'+comp_dir+'/c_binding_c', source='c_binding.c')


objs = filter(lambda o: str(o)[-4:] != '.mod', objs)

sobjs = env.Object(target='../bin/'+comp_dir+'/precisions', source='precisions.f90')
sobjs += env.Object(target='../bin/'+comp_dir+'/parameters', source='parameters.f90')
sobjs += env.Object(target='../bin/'+comp_dir+'/customfftw3', source='customfftw3.f90')
sobjs += env.Object(target='../bin/'+comp_dir+'/missing_pfft', source='missing_pfft.c')
sobjs += env.Object(target='../bin/'+comp_dir+'/custompfft', source='custompfft.f90')
sobjs += env.Object(target='../bin/'+comp_dir+'/fft', source='fft.f90')
Depends(sobjs[-1], 'fft-inc.f90')
Depends(sobjs[-1], 'plan_new-inc.f90')
Depends(objs[-1], 'allocate_fftw-inc.f90')
Depends(objs[-1], 'plan_new_many-inc.f90')
Depends(objs[-1], 'allocate_fftw_many-inc.f90')
Depends(sobjs[-1], sobjs[3])
sobjs += env.Object(target='../bin/'+comp_dir+'/poisfft', source='poisfft.f90')
Depends(sobjs[-1], 'poisfft-inc.f90')
Depends(sobjs[-1], 'loop_nest_3d.f90')
sobjs += env.Object(target='../bin/'+comp_dir+'/main', source='main.f90')
sobjs += env.Object(target='../bin/'+comp_dir+'/c_binding', source='c_binding.f90')
Depends(sobjs[-1], 'c_new-inc.f90')
Depends(sobjs[-1], 'c_execute-inc.f90')
sobjs += env.SharedObject(target='../bin/'+comp_dir+'/c_binding_c', source='c_binding.c')

sobjs = filter(lambda o: str(o)[-4:] != '.mod', sobjs)

lib = env.SharedLibrary(target='../lib/'+comp_dir+'/libpoisfft', source = objs)
#lib = lib + env.StaticLibrary(target='../lib/'+comp_dir+'/libpoisfft', source = sobjs)

if str(mpi)=='yes':
    testobj = env.StaticObject(F90FLAGS='-O3 -g -fbacktrace -fcheck=bounds,pointer -ffpe-trap=zero,overflow,invalid',target='../bin/'+comp_dir+'/testmpi', source='testmpi.f90')
    testobj = filter(lambda o: str(o)[-4:] != '.mod', testobj)
    
    libs = ['pfft','pfftf','fftw3_mpi','fftw3f_mpi','fftw3','fftw3f']
    if (not str(openmp)=='no'):
      libs += ['fftw3_omp']
    test = env.Program(LINKFLAGS=omp_flag+' -ffpe-trap=zero,overflow,invalid', LIBS=libs,target='../bin/'+comp_dir+'/testmpi', source = sobjs + testobj)
    env.Alias('test',['../bin/'+comp_dir+'/testmpi'])
else:
    testobj = env.StaticObject(F90FLAGS='-O2 -g',target='../bin/'+comp_dir+'/testpoisson', source='testpoisson.f90')#!F90FLAGS='-O3',
    testobj = filter(lambda o: str(o)[-4:] != '.mod', testobj)
    
    ctestobj = env.StaticObject(CFLAGS='-O2 -g',target='../bin/'+comp_dir+'/c_testpoisson', source='testpoisson.c')
    
    cctestobj = env.StaticObject(CXXFLAGS='-O2 -g',target='../bin/'+comp_dir+'/cc_testpoisson', source='testpoisson.cc')
    
    test = env.Program(LINKFLAGS=omp_flag, LIBS=['fftw3','fftw3f','fftw3_omp'],target='../bin/'+comp_dir+'/testpoisson', source = sobjs + testobj)
    test += env.Program(LINK=env['CC'],LINKFLAGS=omp_flag, LIBS=['m','fftw3','fftw3f','fftw3_omp']+fortran_libs,target='../bin/'+comp_dir+'/c_testpoisson', source = sobjs + ctestobj)
    test += env.Program(LINK=env['CXX'], LINKFLAGS=omp_flag, LIBS=['m','fftw3','fftw3f','fftw3_omp']+fortran_libs,target='../bin/'+comp_dir+'/cc_testpoisson', source = sobjs + cctestobj)
    env.Alias('test',['../bin/'+comp_dir+'/testpoisson',
                      '../bin/'+comp_dir+'/c_testpoisson',
                      '../bin/'+comp_dir+'/cc_testpoisson'])

Default(lib)
